#!/bin/bash

set -e

trap umount_chroot HUP INT QUIT TERM SIGHUP SIGINT SIGQUIT SIGILL SIGABRT SIGKILL SIGTRAP SIGTERM SIGSTOP SIGSEGV

msg() {
	printf '[\033[32m INFO\033[m ] %s\n' "$@"
}

warn() {
    printf '[\033[33m WARN\033[m ] %s\n' "$@"
}

fail() {
	printf '[\033[31m FAIL\033[m ] %s\n' "$@"
	exit 1
}

mount_chroot() {
	msg "Mounting chroot..."
	mount -v --bind /dev $ROOTFS_DIR/dev
	mount -vt devpts devpts $ROOTFS_DIR/dev/pts -o gid=5,mode=620
	mount -vt proc proc $ROOTFS_DIR/proc
	mount -vt sysfs sysfs $ROOTFS_DIR/sys
	mount -vt tmpfs tmpfs $ROOTFS_DIR/run
	msg "Done mounting chroot."
}

umount_chroot() {
	msg "Unmounting chroot..."
	umount -v $ROOTFS_DIR/dev/pts || true
	umount -v $ROOTFS_DIR/dev || true
	umount -v $ROOTFS_DIR/run || true
	umount -v $ROOTFS_DIR/proc || true
	umount -v $ROOTFS_DIR/sys || true
	msg "Done unmounting chroot."
}

run_chroot_cmd() {
  if [ -f $ROOTFS_DIR/bin/bash ]; then
     export ROOTFS_SHELL=/bin/bash
  else
     export ROOTFS_SHELL=/bin/ash
  fi

  chroot "$ROOTFS_DIR" /usr/bin/env -i \
	  HOME=/ \
	  TERM="$TERM" \
	  LC_ALL=POSIX \
	  MAKEFLAGS="-j2" \
	  PS1='(chroot)$ ' \
	  PATH=/bin:/usr/bin:/sbin:/usr/sbin $ROOTFS_SHELL +h -c "$1"
}

qemu_system_inject() {
  if [ "$HOST_ARCH" != "$ROOTFS_DIR_ARCH" ]; then
      case $ROOTFS_DIR_ARCH in
        x86_64 | x86-64)
          msg "Copying /usr/bin/qemu-system-x86_64 to $ROOTFS_DIR"
          cp /usr/bin/qemu-system-x86_64 $ROOTFS_DIR/usr/bin
          ;;
        aarch64 | arm64)
          msg "Copying /usr/bin/qemu-system-aarch64 to $ROOTFS_DIR"
          cp /usr/bin/qemu-system-aarch64 $ROOTFS_DIR/usr/bin
          ;;
        *)
          fail "Architecture is not supported by 'stage2-build' script -- ( $ROOTFS_DIR_ARCH )"
          ;;
      esac
  else
      msg "Host and root filesystem architectures are the same."
  fi
}

if [ ! -n "$1" ]; then
  fail "Need to specify the directory for quarry core repo..."
fi

if [ ! -d "$1" ]; then
  fail "Quarry core repo does not exist..."
fi

if [ ! -n "$2" ]; then
  fail "Need to specify the directory for the root filesystem..."
fi

if [ ! -d "$2" ]; then
  fail "Root filesystem does not exist..."
fi

if [ ! -n "$3" ]; then
  fail "Need to specify the architecture for the root filesystem..."
fi

export REPO=$1
export ROOTFS_DIR=$2
export ROOTFS_DIR_ARCH=$3
export HOST_ARCH=$(uname -m)

case $ROOTFS_DIR_ARCH in
		x86_64)
			msg "Setting architecture for x86_64..."
			echo "BUILD_ARCH=x86_64" >> $ROOTFS_DIR/etc/scratchpkg.conf
			;;
		aarch64)
			msg "Setting architecture for aarch64..."
                        echo "BUILD_ARCH=aarch64" >> $ROOTFS_DIR/etc/scratchpkg.conf
			;;
		*)
			fail "Architecture is not supported by 'stage2-build' script -- ( $ROOTFS_DIR_ARCH )"
			;;
esac

qemu_system_inject

mount_chroot

msg "Testing rootfs first..."

curl https://raw.githubusercontent.com/junland/openbdk-ng/testing/files/test.c > $ROOTFS_DIR/test.c

run_chroot_cmd "cd / && gcc test.c -o test"

msg "Adding packages..."

mkdir -p $ROOTFS_DIR/pkgs

cp -r $REPO/* $ROOTFS_DIR/pkgs

msg "Building stage 2 packages..."

for pkg in filesystem linux-api-headers glibc zlib diffutils tar libgmp libmpfr libmpc binutils gcc gawk file ncurses bzip2 libelf attr acl expat libressl ca-certificates xz lz4 zstd m4 bison bc binutils make sed grep bash coreutils gzip findutils patch scratchpkg pkgconf perl autoconf automake libtool c-ares libev nghttp2 libssh2 curl libarchive readline cpio; do
	case $pkg in
		*)
                        run_chroot_cmd "cd /pkgs/$pkg && pkgbuild --verbose --skip-shasum"
			;;
	esac
done

msg "Done..."
