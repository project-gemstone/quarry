#!/bin/bash

set -e

set +h

umask 022

msg() {
	printf '[\033[32m INFO\033[m ] %s\n' "$@"
}

fail() {
	printf '[\033[31m FAIL\033[m ] %s\n' "$@"
	exit 1
}

setup_arch() {
	msg "Setting up target architecture..."

	case $BUILD_ARCH in
		x86_64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="x86_64-linux-gnu"
			;;
		aarch64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="aarch64-linux-gnu"
			;;
		*)
			fail "Architecture is not set or is not supported by 'bootstrap' tool -- ( $BUILD_ARCH )"
			;;
	esac
}

setup_env() {
	msg "Setting up the build environment..."

	msg "Setting shell enviroment..."

	## bootstrap variables
	export CWD="$(pwd)"
	export REPO_PACKAGES="$CWD/packages"
	export TOOLCHAIN_PKGS="$CWD/toolchain"
	export UTILS="$CWD/utils"
	export BUILD_ARCH=$BUILD_ARCH

	## build variables
	export HOST_ARCH=$(echo $MACHTYPE | sed 's/-.*//')
	export QEMU_BIN=$(which $QEMUARCH)
	export BUILD="$CWD/BUILD.$BUILD_ARCH"
	export PACKAGES="$BUILD/packages"
	export ROOTFS_DIR="$BUILD/rootfs"
	export SYSROOT_DIR="$BUILD/toolchain/$XTARGET/sysroot"
	export TOOLS_DIR="$BUILD/toolchain"
	export ARTIFACTS="$BUILD/artifacts"

	## compiler variables
	export LC_ALL="POSIX"
	export PATH="$UTILS:$TOOLS_DIR/bin:$TOOLS_DIR/bin:$PATH"
	export ORIGMAKE="$(which make)"
	export CFLAGS="-g0 -Os -s -pipe"
	export CXXFLAGS="$CFLAGS"
	export CPPFLAGS="$CXXFLAGS"
	export HOSTCC="gcc"
	export HOSTCXX="g++"

	if [ -z $MKJOBS ]; then
		export MKJOBS="1"
		msg "Setting makeflags to $MKJOBS..."
	fi

	export MKFLAGS="-j$MKJOBS"

	msg "Preparing the environment for build..."

	mkdir -vp "$BUILD" "$PACKAGES" "$ROOTFS_DIR" "$TOOLS_DIR" "$ARTIFACTS"

	mkdir -p $ARTIFACTS/rootfs
	
	mkdir -p $ARTIFACTS/rootfs/var/lib/scratchpkg/index

	gen_config host "$BUILD"/host.conf

	gen_config target "$BUILD"/target.conf

	msg "Setting package index..."

	mkdir -vp $TOOLS_DIR/var/lib/scratchpkg/index

	mkdir -vp $ROOTFS_DIR/var/lib/scratchpkg/index

	mkdir -vp $SYSROOT_DIR/var/lib/scratchpkg/index

        msg "Adding some staging directories inside toolchain..."

	mkdir -vp $TOOLS_DIR/var/cache/scratchpkg/sources

	mkdir -vp $TOOLS_DIR/var/cache/scratchpkg/log

	msg "Adding some staging directories inside chroot..."

	mkdir -vp $ROOTFS_DIR/var/cache/scratchpkg/sources

	mkdir -vp $ROOTFS_DIR/var/cache/scratchpkg/log

	msg "Backing up env to $BUILD/build.env"

	env >$BUILD/build.env

	msg "Adding export command to env file"

	sed -i 's/^/export /' $BUILD/build.env
	
	msg "Adding fake ldconfig"
	
	mkdir -p "$TOOLS_DIR"/bin

	touch "$TOOLS_DIR"/bin/ldconfig
	
	chmod +x "$TOOLS_DIR"/bin/ldconfig
}

gen_config() {
	local file="$2"

	msg "Generating buildpkg config for $1..."

	if [ "$1" = "target" ]; then
		cat >"$file" <<-EOF
			    set +h
			    ## general variables
			    export LC_ALL="$LC_ALL"
			    export BUILD_ARCH="$BUILD_ARCH"
			    export XHOST="$XHOST"
			    export XTARGET="$XTARGET"
			    export TOOLS_DIR="$TOOLS_DIR"
			    export PKGDEST="$PACKAGES"
			    export PACKAGES="$BUILD/packages"
			    export ROOTFS_DIR="$BUILD/rootfs"
			    export SYSROOT_DIR="$BUILD/toolchain/$XTARGET/sysroot"
			    export TOOLS_DIR="$BUILD/toolchain"
			    export PATH="$PATH"
			    export BOOTSTRAP="yes"
			
			    ## build variables
			    export CFLAGS="$CFLAGS"
			    export CXXFLAGS="$CXXFLAGS"
			    export CPPFLAGS="$CXXFLAGS"
			    export PERLFLAGS="--target=$XTARGET"
			    export HOSTCC="$HOSTCC"
			    export HOSTCXX="$HOSTCXX"
			    export ORIGMAKE="$ORIGMAKE"
			    export BUILDFLAGS="--build=$XHOST --host=$XTARGET"
			    export TOOLFLAGS="--build=$XHOST --host=$XTARGET --target=$XTARGET"
			
			    ## target binaries
			    export CROSS_COMPILE="$XTARGET-"
			    export CC="$XTARGET-gcc"
			    export CXX="$XTARGET-g++"
			    export CPP="$XTARGET-cpp"
			    export AR="$XTARGET-ar"
			    export AS="$XTARGET-as"
			    export NM="$XTARGET-nm"
			    export RANLIB="$XTARGET-ranlib"
			    export OBJCOPY="$XTARGET-objcopy"
                            export OBJDUMP="$XTARGET-objdump"
			    export LD="$XTARGET-ld"
			    export STRIP="$XTARGET-strip"     
			
			    ## scratchpkg variables
			    DOWNLOAD_PROG="wget"
			    WGET_OPTS="--no-check-certificate --tries=15"
			    CURL_OPTS="--insecure"
			    COMPRESSION_MODE="xz"
                            SOURCE_DIR="$ROOTFS_DIR/var/cache/scratchpkg/sources"
                            PACKAGE_DIR="$PACKAGES"
                            LOG_DIR="$ROOTFS_DIR/var/cache/scratchpkg/log"
		EOF
	elif [ "$1" = "host" ]; then
		cat >"$file" <<-EOF
			    set +h
			    ## general variables
			    export LC_ALL="$LC_ALL"
			    export BUILD_ARCH="$BUILD_ARCH"
			    export XHOST="$XHOST"
			    export XTARGET="$XTARGET"
			    export TOOLS_DIR="$TOOLS_DIR"
			    export PKGDEST="$PACKAGES"
			    export PATH="$PATH"
			    export PACKAGES="$BUILD/packages"
			    export ROOTFS_DIR="$BUILD/rootfs"
			    export SYSROOT_DIR="$BUILD/toolchain/$XTARGET/sysroot"
			    export TOOLS_DIR="$BUILD/toolchain"
			    export BOOTSTRAP="yes"
			
			    ## build variables
			    export CFLAGS="$CFLAGS"
			    export CXXFLAGS="$CXXFLAGS"
			    export CPPFLAGS="$CXXFLAGS"
			    export HOSTCC="$HOSTCC"
			    export HOSTCXX="$HOSTCXX"
			    export ORIGMAKE="$ORIGMAKE"
			
			    ## pkgbuild variables
			    DOWNLOAD_PROG="wget"
			    WGET_OPTS="--no-check-certificate --tries=15"
			    CURL_OPTS="--insecure"
			    COMPRESSION_MODE="xz"
			    OPTIONS=(buildflags emptydirs makeflags)               
                            SOURCE_DIR="$TOOLS_DIR/var/cache/scratchpkg/sources"
                            PACKAGE_DIR="$PACKAGES"
                            LOG_DIR="$TOOLS_DIR/var/cache/scratchpkg/log"
		EOF
	fi
}

# pkgbuild-toolchain <package name>
# Note: Installs into $TOOLS_DIR directory.
pkgbuild-toolchain() {

	if [ -f "$PACKAGES/.$1.stamp" ]; then
		msg "$1 stamp exists, skipping..."
		return 0
	fi

	msg "Building $1 for toolchain using host config..."

	cd $TOOLCHAIN_PKGS/$1 && pkgbuild --verbose --config=$BUILD/host.conf

	echo "$1" >$PACKAGES/.$1.stamp
}

# pkgbuild-target <package name> <install location after building>
pkgbuild-target() {

	unset PKG_NAME

	if [ -f "$PACKAGES/.$1.stamp" ]; then
		msg "$1 stamp exists, skipping..."
		return 0
	fi

	msg "Building $1 using target config..."

	cd $REPO_PACKAGES/$1 && pkgbuild --verbose --skip-shasum --config=$BUILD/target.conf

	msg "Installing $1 into $2"

        PKG_NAME=$(ls $PACKAGES | grep "^$1-[[:digit:]]")

	cd $PACKAGES && pkgadd $PKG_NAME --verbose --no-ld-config --root=$2

	echo "$1" >$PACKAGES/.$1.stamp
}

# pkgbuild-host <package name> <install location after building>
pkgbuild-host() {

	unset PKG_NAME

	if [ -f "$PACKAGES/.$1.stamp" ]; then
		msg "$1 stamp exists, skipping..."
		return 0
	fi

	msg "Building $1 using host config..."

	cd $REPO_PACKAGES/$1 && pkgbuild --verbose --skip-shasum --config=$BUILD/host.conf

	msg "Installing $1 into $2"

	PKG_NAME=$(ls $PACKAGES | grep "^$1-[[:digit:]]")

	cd $PACKAGES && pkgadd $PKG_NAME --verbose --no-ld-config --root=$2

	echo "$1" >$PACKAGES/.$1.stamp
}

pkginstall() {

        unset PKG_NAME

	msg "Just installing $1 into $2"

	PKG_NAME=$(ls $PACKAGES | grep "^$1-[[:digit:]]")

	cd $PACKAGES && pkgadd $PKG_NAME --verbose --no-ld-config --root=$2
}

# Build the toolchain. (Run first.)
build_toolchain() {
	msg "Going to build the toolchain..."

	msg "Adding fake ldconfig"

	mkdir -vp "$TOOLS_DIR"/bin && touch "$TOOLS_DIR"/bin/ldconfig && chmod +x "$TOOLS_DIR"/bin/ldconfig
	
	msg "Building the toolchain now..."

	for pkg in host-info host-file host-m4 host-linux-api-headers host-binutils host-gcc-static host-glibc host-gcc; do
		case $pkg in
			*)
				pkgbuild-toolchain $pkg
				msg "Here is the toolchain..."
				ls $TOOLS_DIR
				;;
		esac
	done

	msg "Cleaning up"

	find "$TOOLS_DIR" -name "*.pod" -print0 | xargs --verbose -0 rm -rf

	find "$TOOLS_DIR" -name ".packlist" -print0 | xargs --verbose -0 rm -rf

	msg "Done building toolchain for $BUILD_ARCH"

	echo "Toolchain Finished" >$PACKAGES/.toolchain.stamp
}

# Builds the chroot packages. (Must build the toolchain first.)
build_chroot() {

	if [ ! -f "$PACKAGES/.toolchain.stamp" ]; then
		fail "Looks like the toolchain hasn't been compiled yet. Exiting..."
	fi

	msg "Now we are going to build the rest of the packages..."

	for pkg in filesystem linux-api-headers glibc zlib libgmp libmpfr libmpc gcc libelf expat libressl libarchive busybox; do
		case $pkg in
                       zlib | expat | libressl | libarchive | libelf | libgmp | libmpfr | libmpc | ncurses | attr | acl | xz | lz4 | zstd | libev | nghttp2 | libssh2 | libcap-ng)
			        pkgbuild-target $pkg $ROOTFS_DIR
				pkginstall $pkg $SYSROOT_DIR
				;;
			*)
				pkgbuild-target $pkg $ROOTFS_DIR
				;;
		esac
	done

	msg "Done building bootstrap for $BUILD_ARCH"
}

## Magic starts here...

if [ "$UID" != 0 ]; then
	fail "Bootstrap process can only be run as root."
fi

if [ $# -gt 1 ]; then
	fail "Passing way too many parameters for the bootstrap command. Pass either no paramters, 'toolchain', or 'chroot' to use this command."
fi

setup_arch
setup_env

if [ "$1" == "toolchain" ]; then
	msg "Building only the toolchain..."
	build_toolchain
	msg "Toolchain built..."
	exit 0
fi

if [ "$1" == "chroot" ]; then
	msg "Building only the chroot packages..."
	build_chroot
	msg "Chroot built..."
fi

if [ "$1" == "" ]; then
	msg "Building both toolchain and chroot..."
	build_toolchain
	build_chroot
fi

if [ "$PACKAGE_ALL" = "yes" ]; then
        msg "Packing up packages and root filesystem."

	FILE_DATE=$(date +%Y%m%d_%H%M%S)

	msg "Packing packages..."

	cd $PACKAGES && tar -zcvf $ARTIFACTS/packages-$BUILD_ARCH-$FILE_DATE.tar.gz --exclude 'host-*' --exclude '*.stamp' *

	msg "Setting up temp rootfs..."

	for pkg in filesystem zlib diffutils tar libgmp libmpfr libmpc binutils gcc gawk file ncurses bzip2 libelf attr acl expat libressl ca-certificates xz lz4 zstd m4 bison bc binutils make sed grep bash coreutils gzip findutils patch scratchpkg pkgconf perl autoconf automake libtool c-ares libevnghttp2 libssh2 curl libarchive readline cpio libcap-ng gperf kmod eudev; do
		case $pkg in
			*)
				pkgbuild-target $pkg $ROOTFS_DIR
				;;
		esac
	done

	msg "Packing rootfs..."

	cd $ARTIFACTS/rootfs && tar -zcvf $ARTIFACTS/rootfs-$BUILD_ARCH-$FILE_DATE.tar.gz *

	msg "Removing temp rootfs"

	rm -rf $ARTIFACTS/rootfs
fi

msg "And thats it... Have fun!"

exit 0
