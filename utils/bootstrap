#!/bin/bash

set -e

set +h

msg() {
	printf '[\033[32m INFO\033[m ] %s\n' "$@"
}

fail() {
	printf '[\033[31m FAIL\033[m ] %s\n' "$@"
	exit 1
}

setup_arch() {
	msg "Setting up target architecture..."

	case $BUILD_ARCH in
		x86_64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="x86_64-linux-gnu"
			;;
		aarch64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="aarch64-linux-gnu"
			;;
		*)
			fail "Architecture is not set or is not supported by 'bootstrap' tool -- ( $BUILD_ARCH )"
			;;
	esac
}

setup_env() {
	msg "Setting up the build environment..."

	msg "Setting shell enviroment..."

	## build variables
	export BUILD_ARCH=$BUILD_ARCH
	export HOST_ARCH=$(echo $MACHTYPE | sed 's/-.*//')
	export QEMU_BIN=$(which $QEMUARCH)
	export CWD="$(pwd)"
	export BUILD="$CWD/BUILD.$BUILD_ARCH"
	export PACKAGES="$BUILD/packages"
	export ROOTFS="$BUILD/rootfs"
	export TOOLS="$BUILD/toolchain"
	export ARTIFACTS="$BUILD/artifacts"

	## GEMSTONE variables
	export GEMSTONE="$(pwd)"
	export GEMSTONE_PACKAGES="$GEMSTONE/core"
	export GEMSTONE_TOOLS="$GEMSTONE/toolchain"
	export GEMSTONE_UTILS="$GEMSTONE/utils"

	## compiler variables
	export LC_ALL="POSIX"
	export PATH="$GEMSTONE_UTILS:$TOOLS/bin:$PATH"
	export ORIGMAKE="$(which make)"
	export CFLAGS="-g0 -Os -s -pipe"
	export CXXFLAGS="$CFLAGS"
	export CPPFLAGS="$CXXFLAGS"
	export HOSTCC="gcc"
	export HOSTCXX="g++"

	if [ -z $MKJOBS ]; then
		export MKJOBS="$(expr $(nproc) + 1)"
	fi

	export MKFLAGS="-j$MKJOBS"

	msg "Preparing the environment for build..."

	mkdir -vp "$BUILD" "$PACKAGES" "$ROOTFS" "$TOOLS" "$ARTIFACTS"

	mkdir -p $ARTIFACTS/rootfs
	
	mkdir -p $ARTIFACTS/rootfs/var/lib/scratchpkg/index

	gen_config host "$BUILD"/host.conf

	gen_config target "$BUILD"/target.conf

	msg "Setting package index..."

	mkdir -vp $TOOLS/var/lib/scratchpkg/index

	mkdir -vp $ROOTFS/var/lib/scratchpkg/index

	msg "Adding some staging directories inside chroot..."

	mkdir -vp $ROOTFS/var/cache/scratchpkg/sources

	mkdir -vp $ROOTFS/var/cache/scratchpkg/packages

	mkdir -vp $ROOTFS/var/cache/scratchpkg/log

	msg "Backing up env to $BUILD/build.env"

	env >$BUILD/build.env

	msg "Adding export command to env file"

	sed -i 's/^/export /' $BUILD/build.env
}

gen_config() {
	local file="$2"

	msg "Generating buildpkg config for $1..."

	if [ "$1" = "target" ]; then
		cat >"$file" <<-EOF
			    set +h
			    ## general variables
			    export LC_ALL="$LC_ALL"
			    export BUILD_ARCH="$BUILD_ARCH"
			    export ROOTFS="$ROOTFS"
			    export TOOLS="$TOOLS"
			    export PKGDEST="$PACKAGES"
			    export PACKAGES="$BUILD/packages"
			    export ROOTFS="$BUILD/rootfs"
			    export TOOLS="$BUILD/toolchain"
			    export PATH="$PATH"
			    export BOOTSTRAP="yes"
			
			    ## build variables
			    export XHOST="$XHOST"
			    export XTARGET="$XTARGET"
			    export CFLAGS="$CFLAGS"
			    export CXXFLAGS="$CXXFLAGS"
			    export CPPFLAGS="$CXXFLAGS"
			    export PERLFLAGS="--target=$XTARGET"
			    export HOSTCC="$HOSTCC"
			    export HOSTCXX="$HOSTCXX"
			    export BUILDFLAGS="--build=$XHOST --host=$XTARGET"
			    export TOOLFLAGS="--build=$XHOST --host=$XTARGET --target=$XTARGET"
			    export PKG_CONFIG_PATH="$ROOTFS/usr/lib/pkgconfig:$ROOTFS/usr/share/pkgconfig"
			    export PKG_CONFIG_SYSROOT_DIR="$ROOTFS"
			    export PKG_CONFIG_LIBDIR="$ROOTFS/usr/lib/pkgconfig"
			
			    ## target binaries
			    export CROSS_COMPILE="$XTARGET-"
			    export CC="$XTARGET-gcc"
			    export CXX="$XTARGET-g++"
			    export AR="$XTARGET-ar"
			    export AS="$XTARGET-as"
			    export RANLIB="$XTARGET-ranlib"
			    export LD="$XTARGET-ld"
			    export STRIP="$XTARGET-strip"     
			
			    ## scratchpkg variables
			    PACKAGE_DIR=$PACKAGES
			    DOWNLOAD_PROG="wget"
			    WGET_OPTS="--no-check-certificate --tries=15"
			    CURL_OPTS="--insecure"
			    COMPRESSION_MODE="xz"
		EOF
	elif [ "$1" = "host" ]; then
		cat >"$file" <<-EOF
			    set +h
			    ## general variables
			    export LC_ALL="$LC_ALL"
			    export BUILD_ARCH="$BUILD_ARCH"
			    export ROOTFS="$ROOTFS"
			    export TOOLS="$TOOLS"
			    export PKGDEST="$PACKAGES"
			    export PATH="$PATH"
			    export PACKAGES="$BUILD/packages"
			    export ROOTFS="$BUILD/rootfs"
			    export TOOLS="$BUILD/toolchain"
			    export BOOTSTRAP="yes"
			
			    ## build variables
			    export XHOST="$XHOST"
			    export XTARGET="$XTARGET"
			    export CFLAGS="$CFLAGS"
			    export CXXFLAGS="$CXXFLAGS"
			    export CPPFLAGS="$CXXFLAGS"
			    export HOSTCC="$HOSTCC"
			    export HOSTCXX="$HOSTCXX"
			
			    ## pkgbuild variables
			    PACKAGE_DIR=$PACKAGES
			    DOWNLOAD_PROG="wget"
			    WGET_OPTS="--no-check-certificate --tries=15"
			    CURL_OPTS="--insecure"
			    COMPRESSION_MODE="xz"
			    OPTIONS=(buildflags emptydirs makeflags)
		EOF
	fi
}

# pkgbuild-toolchain <package name>
# Note: Installs into $TOOLS directory.
pkgbuild-toolchain() {

	if [ -f "$PACKAGES/.$1.stamp" ]; then
		msg "$1 stamp exists, skipping..."
		return 0
	fi

	msg "Building $1 for toolchain using host config..."

	cd $GEMSTONE_TOOLS/$1 && pkgbuild --verbose --config=$BUILD/host.conf

	echo "$1" >$PACKAGES/.$1.stamp
}

# pkgbuild-target <package name> <install location after building>
pkgbuild-target() {

	unset PKG_NAME

	if [ -f "$PACKAGES/.$1.stamp" ]; then
		msg "$1 stamp exists, skipping..."
		return 0
	fi

	msg "Building $1 using target config..."

	cd $GEMSTONE_PACKAGES/$1 && pkgbuild --verbose --skip-shasum --config=$BUILD/target.conf

	msg "Installing $1 into $2"

    PKG_NAME=$(ls $PACKAGES | grep "^$1-[[:digit:]]")

	cd $PACKAGES && pkgadd $PKG_NAME --verbose --no-ld-config --root=$2

	echo "$1" >$PACKAGES/.$1.stamp
}

# pkgbuild-host <package name> <install location after building>
pkgbuild-host() {

	unset PKG_NAME

	if [ -f "$PACKAGES/.$1.stamp" ]; then
		msg "$1 stamp exists, skipping..."
		return 0
	fi

	msg "Building $1 using host config..."

	cd $GEMSTONE_PACKAGES/$1 && pkgbuild --verbose --skip-shasum --config=$BUILD/host.conf

	msg "Installing $1 into $2"

	PKG_NAME=$(ls $PACKAGES | grep "^$1-[[:digit:]]")

	cd $PACKAGES && pkgadd $PKG_NAME --verbose --no-ld-config --root=$2

	echo "$1" >$PACKAGES/.$1.stamp
}

# Build the toolchain. (Run first.)
build_toolchain() {
	msg "Going to build the toolchain..."

	msg "Adding fake ldconfig"

	mkdir -vp "$TOOLS"/bin && touch "$TOOLS"/bin/ldconfig && chmod +x "$TOOLS"/bin/ldconfig

	for pkg in host-info linux-api-headers host-libgmp host-libmpfr host-libmpc host-binutils host-gcc-static glibc host-gcc host-file host-pkgconf host-m4; do
		case $pkg in
			linux-api-headers)
				pkgbuild-host $pkg $ROOTFS
				msg "Installing $pkg into tools as well..."
				cd $PACKAGES && pkgadd $pkg*.spkg.* --verbose --root=$TOOLS
				;;
			glibc)
				pkgbuild-target $pkg $ROOTFS
				;;
			*)
				pkgbuild-toolchain $pkg
				;;
		esac
	done

	msg "Cleaning up"

	find "$TOOLS" -name "*.pod" -print0 | xargs --verbose -0 rm -rf

	find "$TOOLS" -name ".packlist" -print0 | xargs --verbose -0 rm -rf

	msg "Done building toolchain for $BUILD_ARCH"

	echo "Toolchain Finished" >$PACKAGES/.toolchain.stamp
}

# Builds the chroot packages. (Must build the toolchain first.)
build_chroot() {

	if [ ! -f "$PACKAGES/.toolchain.stamp" ]; then
		fail "Looks like the toolchain hasn't been compiled yet. Exiting..."
	fi

	msg "Now we are going to build the rest of the packages..."

	for pkg in filesystem zlib diffutils tar libgmp libmpfr libmpc binutils gcc gawk file ncurses bzip2 libelf attr acl expat libressl ca-certificates xz lz4 zstd m4 bison bc binutils make sed grep bash coreutils gzip findutils patch scratchpkg pkgconf perl autoconf automake libtool c-ares libev nghttp2 libssh2 curl libarchive readline cpio libcap-ng gperf kmod eudev; do
		case $pkg in
			*)
				pkgbuild-target $pkg $ROOTFS
				;;
		esac
	done

	msg "Done building bootstrap for $BUILD_ARCH"
}

## Magic starts here...

if [ "$UID" != 0 ]; then
	fail "Bootstrap process can only be run as root."
fi

if ! command -v pkgbuild >/dev/null; then
	fail "The 'pkgbuild' was not detected in your PATH, please adjust your path or install 'scratchpkg' on your system to use this script..."
fi

if ! command -v pkgadd >/dev/null; then
	fail "The 'pkgadd' was not detected in your PATH, please adjust your path or install 'scratchpkg' on your system to use this script..."
fi

if [ $# -gt 1 ]; then
	fail "Passing way too many parameters for the bootstrap command. Pass either no paramters, 'toolchain', or 'chroot' to use this command."
fi

setup_arch
setup_env

if [ "$1" == "toolchain" ]; then
	msg "Building only the toolchain..."
	build_toolchain
	msg "Toolchain built..."
	exit 0
fi

if [ "$1" == "chroot" ]; then
	msg "Building only the chroot packages..."
	build_chroot
	msg "Chroot built..."
fi

if [ "$1" == "" ]; then
	msg "Building both toolchain and chroot..."
	build_toolchain
	build_chroot
fi

if [ "$PACKAGE_ALL" = "yes" ]; then
    msg "Packing up packages and root filesystem."

	FILE_DATE=$(date +%Y%m%d_%H%M%S)

	msg "Packing packages..."

	cd $PACKAGES && tar -zcvf $ARTIFACTS/packages-stage1-$BUILD_ARCH-$FILE_DATE.tar.gz --exclude 'host-*' --exclude '*.stamp' *

	msg "Setting up temp rootfs..."

	for pkg in filesystem linux-api-headers glibc kmod diffutils zlib tar libgmp libmpfr libmpc binutils gcc gawk file ncurses bzip2 libelf attr acl expat libressl ca-certificates xz lz4 zstd m4 bison bc binutils make sed grep bash coreutils gzip findutils patch scratchpkg pkgconf perl autoconf automake libtool c-ares libev nghttp2 libssh2 curl libarchive cpio libcap-ng gperf kmod eudev; do
		case $pkg in
			*)
				PKG_NAME=$(ls $PACKAGES | grep "^$pkg-[[:digit:]]")
				cd $PACKAGES && pkgadd $PKG_NAME --verbose --no-ld-config --root=$ARTIFACTS/rootfs
				;;
		esac
	done

	msg "Packing rootfs..."

	cd $ARTIFACTS/rootfs && tar -zcvf $ARTIFACTS/rootfs-stage1-$BUILD_ARCH-$FILE_DATE.tar.gz *

	msg "Removing temp rootfs"

	rm -rf $ARTIFACTS/rootfs
fi

msg "And thats it... Have fun!"

exit 0
